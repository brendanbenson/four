{
  "name": "sinon-mocha",
  "version": "0.0.3",
  "author": {
    "name": "James Lal",
    "email": "james@lightsofapollo.com"
  },
  "description": "Automatic restore for spies & mocks for mocha",
  "main": "./lib/sinon-mocha",
  "repository": {
    "type": "git",
    "url": "https://github.com/lightsofapollo/sinon-mocha/"
  },
  "keywords": [
    "spec",
    "mocha",
    "sinon"
  ],
  "devDependencies": {
    "mocha": "~1.0",
    "expect.js": "*",
    "sinon": "~1.3"
  },
  "license": "MIT",
  "engine": {
    "node": ">=0.4"
  },
  "readme": "# Sinon Mocha\n\nSinon Mocha is an extension library for mocha/sinon that will automatically clean up \"wrapped\" methods.\n\nTested with:\n\n| **Sinon** | **Mocha** |\n| ----- | ----- |\n| 1.3   | 0.12  |\n\nAs of version 0.0.1 browser support is not tested but is planned in a future version.\n\n## Example Usage\n\n``` javascript\n\nvar sinon = require('sinon'),\n    //You don't need to use expect for this to work\n    //This is just to provide a working example\n    expect = require('expect.js');\n    \n//Enhance sinon\n//You can also pass a mocha as the second argument.\nrequire('sinon-mocha').enhance(sinon);\n\ndescribe(\"MyClass\", function(){\n\n  var MyClass = require('my-class'),\n      subject;\n      \n  //before (all) hooks are *NOT* automatically cleaned up for you.\n  before(function(){\n    sinon.stub(MyClass.prototype, 'ajax', function(){\n      //...\n    });\n  });\n  \n  //You must `.restore` the method yourself.\n  after(function(){\n    MyClass.prototype.ajax.restore();\n  });\n\n  beforeEach(function(){\n    subject = new MyClass();\n    \n    sinon.spy(subject, 'spiedMethod');\n    //Stubs also work\n    sinon.stub(subject, 'stubbedMethod');\n    //And stubs with functionality\n    sinon.stub(subject, 'stubbedMethodWFunc', function(){\n      console.log(' I get called ! ' );\n    });\n  });\n  \n  describe(\".spiedMethod\", function(){\n  \n    it(\"will call spy\", function(){\n      subject.spiedMethod();\n      expect(subject.spiedMethod.called).to.be(true);\n    });\n    \n  });\n  \n  // Etc...\n\n});\n\n```\n\n## How it works\n\nIn short sinon's wrapMethod function is overwritten to capture its results in the `beforeEach` of every test.\nThen in the `afterEach` those methods are `.restore()`[d].\n\nTo gain access to mocha there is a hack that will search through `require.cache` and pick out its `mocha/index.js`\nand require it to ensure we modify the actual mocha being used. I ran into some issue that lead me down this path.\nWhen running `require('mocha')` I would end up with a different instance then was being used inside the test context.\n\n`Mocha.Runner.runSuite` is patched to add a beforeEach and afterEach that invokes the sinon magic.\nSee `lib/mocha-hooks.js`. \n\n## WHY?\n\nJasmine spoiled me.\n\n## License\n\nMIT (see LICENSE)\n",
  "readmeFilename": "README.md",
  "_id": "sinon-mocha@0.0.3",
  "_shasum": "113117619070c669472dece4db80a18c0021511f",
  "_from": "sinon-mocha@",
  "_resolved": "https://registry.npmjs.org/sinon-mocha/-/sinon-mocha-0.0.3.tgz"
}
